
SELECT *
FROM layoffs;

-- Make a copy of the original table to keep the data safe while we clean it
CREATE TABLE layoffs_staging
LIKE layoffs;

-- Put all the data from the original table into the new copy
INSERT layoffs_staging
SELECT *
FROM layoffs;

SELECT *
FROM layoffs_staging;

--Find duplicate rows in the data (rows that look exactly the same)
SELECT *,
ROW_NUMBER() OVER(PARTITION BY
    company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions
) AS row_num
FROM layoffs_staging;

--Create a temporary result to mark duplicates
WITH duplicate_cte AS (
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY
        company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions
    ) AS row_num
    FROM layoffs_staging
)
-- Show only the rows that are duplicates (row_num higher than 1)
SELECT *
FROM duplicate_cte
WHERE row_num > 1;

-- Create a new table where we’ll clean the data and remove duplicates
CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--Fill the new table and assign a row number to each group of similar rows
INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY
    company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions
) AS row_num
FROM layoffs_staging;

--Delete the rows that are marked as duplicates (keep only one copy)
DELETE 
FROM layoffs_staging2
WHERE row_num > 1;


SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- Fix extra spaces in company names (like "Google " to "Google")
SELECT DISTINCT company, TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

SELECT DISTINCT industry
FROM layoffs_staging2
ORDER BY 1;

--Find industries that start with “Crypto” and fix them
SELECT DISTINCT industry
FROM layoffs_staging2
WHERE industry LIKE 'crypto%'
ORDER BY 1;

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

--See what location and country names are used
SELECT DISTINCT location
FROM layoffs_staging2
ORDER BY 1;

SELECT DISTINCT country
FROM layoffs_staging2
WHERE country LIKE 'United States%'
GROUP BY country
ORDER BY 1 DESC;

--Standardize “United States” to look the same in every row
UPDATE layoffs_staging2
SET country = 'United States'
WHERE country LIKE 'United States.';


SELECT `date`
FROM layoffs_staging2
ORDER BY 1;

--Convert the date format into a real DATE format
UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

--Tell MySQL to treat the date column as a DATE type
ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

--See how many rows have missing values in both total_laid_off and percentage_laid_off
SELECT COUNT(*)
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

--Find rows where industry is missing or empty
SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry = '';

--Fix missing industries by setting the correct value for each company

-- Airbnb → Travel
SELECT *
FROM layoffs_staging2
WHERE company = 'Airbnb';

UPDATE layoffs_staging2
SET industry = 'Travel' 
WHERE company = 'Airbnb';

-- Carvana → Transportation
SELECT *
FROM layoffs_staging2
WHERE company = 'Carvana';

UPDATE layoffs_staging2
SET industry = 'Transportation' 
WHERE company = 'Carvana';

-- Juul → Consumer
SELECT *
FROM layoffs_staging2

-- Delete rows that are completely empty in key fields
DELETE 
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL
AND funds_raised_millions IS NULL;

-- Final view of the cleaned dataset
SELECT *
FROM layoffs_staging2;

-- Remove the row_num column now that we no longer need it
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


